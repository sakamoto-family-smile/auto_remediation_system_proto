version: '3.8'

# デフォルトプロファイル: 基本サービス（db, redis, backend）
# 全コンポーネント起動: docker-compose --profile full up
# 改修エージェント付き: docker-compose --profile remediation up
# フロントエンド付き: docker-compose --profile frontend up

services:
  # PostgreSQL データベース
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: auto_remediation
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis（セッション・キャッシュ）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI バックエンド
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      # データベース設定
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/auto_remediation

      # アプリケーション設定
      DEBUG: "true"
      ENVIRONMENT: "development"
      SECRET_KEY: "docker-compose-development-secret-key"

      # JWT設定
      JWT_EXPIRE_MINUTES: "60"
      JWT_ALGORITHM: "HS256"

      # Google Cloud設定（開発環境ダミー値）
      GOOGLE_CLOUD_PROJECT: "docker-dev-project"
      GCP_PROJECT_ID: "docker-dev-project"
      VERTEX_AI_LOCATION: "us-central1"
      VERTEX_AI_MODEL_NAME: "claude-3-sonnet@20240229"

      # Firebase設定（開発環境ダミー値）
      FIREBASE_PROJECT_ID: "docker-dev-firebase"
      FIREBASE_WEB_API_KEY: "docker-dev-api-key"

      # 外部API設定
      CURSOR_API_KEY: "${CURSOR_API_KEY:-docker-dev-cursor-key}"
      GITHUB_TOKEN: "${GITHUB_TOKEN:-docker-dev-github-token}"
      GITHUB_WEBHOOK_SECRET: "docker-dev-webhook-secret"

      # Slack設定
      SLACK_BOT_TOKEN: "${SLACK_BOT_TOKEN:-}"
      SLACK_VERIFICATION_TOKEN: "${SLACK_VERIFICATION_TOKEN:-}"

      # フロントエンド設定
      FRONTEND_URL: "http://localhost:3000"

      # ログ設定
      LOG_LEVEL: "INFO"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 改修エージェント（Cloud Run Jobsシミュレーション）
  remediation-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.remediation
    environment:
      # データベース設定
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@db:5432/auto_remediation

      # アプリケーション設定
      SECRET_KEY: "docker-compose-development-secret-key"
      GOOGLE_CLOUD_PROJECT: "docker-dev-project"
      VERTEX_AI_LOCATION: "us-central1"
      VERTEX_AI_MODEL_NAME: "claude-3-sonnet@20240229"

      # Firebase設定（開発環境ダミー値）
      FIREBASE_PROJECT_ID: "docker-dev-firebase"
      FIREBASE_WEB_API_KEY: "docker-dev-api-key"

      # cursor-cli設定
      CURSOR_API_KEY: "${CURSOR_API_KEY:-docker-dev-cursor-key}"
      CURSOR_CLI_TIMEOUT: "300"

      # GitHub設定
      GITHUB_TOKEN: "${GITHUB_TOKEN:-docker-dev-github-token}"
      GITHUB_WEBHOOK_SECRET: "docker-dev-webhook-secret"

      # Slack設定
      SLACK_BOT_TOKEN: "${SLACK_BOT_TOKEN:-}"
      SLACK_VERIFICATION_TOKEN: "${SLACK_VERIFICATION_TOKEN:-}"

      # フロントエンド設定
      FRONTEND_URL: "http://localhost:3000"

      # ログ設定
      LOG_LEVEL: "DEBUG"
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    volumes:
      - ./remediation:/app/remediation
      - ./backend:/app/backend
      - remediation_workspace:/app/workspace
    # デフォルトで起動（プロファイル指定なし）
    restart: unless-stopped

  # React フロントエンド（開発環境）
  frontend:
    image: node:18-alpine
    working_dir: /app
    environment:
      REACT_APP_API_URL: http://localhost:8000/api/v1
      REACT_APP_FIREBASE_CONFIG: '{"apiKey":"docker-dev-api-key"}'
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm install && npm start"
    depends_on:
      - backend
    profiles:
      - frontend  # docker-compose --profile frontend up で起動
      - full      # docker-compose --profile full up で起動

volumes:
  postgres_data:
  remediation_workspace:
